Description: Use system Lua 5.1 instead of bundled version
 FCEUX not only has a bundled version of Lua 5.1, it relies on being able
 to access internal data structures in the Lua library which were never meant
 to be accessed from outside, and do thus not provide a stable API, and FCEUX
 would then potentially need to be rebuilt from source when a new version of
 Lua 5.1 is released (if any).
 This patch removes the optimization in FCEUX that was relying on being able
 to access these data structures, and links it against the system-installed
 version of the lua library..

Author: Alexander Toresson <alexander.toresson@gmail.com>
Author: Joe Nahmias <jello@debian.org>

--- fceux.orig/SConstruct
+++ fceux/SConstruct
@@ -43,7 +43,7 @@
   env['LSB_FIRST'] = 0
 
 # Default compiler flags:
-env.Append(CCFLAGS = ['-Wall', '-Wno-write-strings', '-Wno-sign-compare', '-Isrc/lua/src'])
+env.Append(CCFLAGS = ['-Wall', '-Wno-write-strings', '-Wno-sign-compare'])
 
 if os.environ.has_key('PLATFORM'):
   env.Replace(PLATFORM = os.environ['PLATFORM'])
@@ -77,7 +77,7 @@
   env['LIBS'] = ['wsock32'];
 
 if env['PLATFORM'] == 'win32':
-  env.Append(CPPPATH = [".", "drivers/win/", "drivers/common/", "drivers/", "drivers/win/zlib", "drivers/win/directx", "drivers/win/lua/include"])
+  env.Append(CPPPATH = [".", "drivers/win/", "drivers/common/", "drivers/", "drivers/win/zlib", "drivers/win/directx"])
   env.Append(CPPDEFINES = ["PSS_STYLE=2", "WIN32", "_USE_SHARED_MEMORY_", "NETWORK", "FCEUDEF_DEBUGGER", "NOMINMAX", "NEED_MINGW_HACKS", "_WIN32_IE=0x0600"])
   env.Append(LIBS = ["rpcrt4", "comctl32", "vfw32", "winmm", "ws2_32", "comdlg32", "ole32", "gdi32", "htmlhelp"])
 else:
@@ -126,6 +126,7 @@
       env.Append(CCFLAGS = ["-DLUA_USE_LINUX"])
     lua_available = False
     if conf.CheckLib('lua5.1'):
+      env.Append(CCFLAGS = ["-I/usr/include/lua5.1"])
       env.Append(LINKFLAGS = ["-ldl", "-llua5.1"])
       lua_available = True
     elif conf.CheckLib('lua'):
--- fceux.orig/src/lua-engine.cpp
+++ fceux/src/lua-engine.cpp
@@ -53,7 +53,6 @@
 #include <lua.h>
 #include <lauxlib.h>
 #include <lualib.h>
-#include <lstate.h>
 #ifdef WIN32
 	int iuplua_open(lua_State * L);
 	int iupcontrolslua_open(lua_State * L);
@@ -1157,17 +1156,10 @@
 
 		if (lua_isfunction(L, -1))
 		{
-			// since the scriptdata can be very expensive to load
-			// (e.g. the registered save function returned some huge tables)
-			// check the number of parameters the registered load function expects
-			// and don't bother loading the parameters it wouldn't receive anyway
-			int numParamsExpected = (L->top - 1)->value.gc->cl.l.p->numparams; // NOTE: if this line crashes, that means your Lua headers are out of sync with your Lua lib
-			if(numParamsExpected) numParamsExpected--; // minus one for the savestate number we always pass in
-
 			int prevGarbage = lua_gc(L, LUA_GCCOUNT, 0);
 
 			lua_pushinteger(L, savestateNumber);
-			saveData.LoadRecord(L, LUA_DATARECORDKEY, numParamsExpected);
+			saveData.LoadRecord(L, LUA_DATARECORDKEY, (unsigned int) -1);
 			int n = lua_gettop(L) - 1;
 
 			int ret = lua_pcall(L, n, 0, 0);
